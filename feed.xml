<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://taeyoungson.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://taeyoungson.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-08T11:26:51+00:00</updated><id>https://taeyoungson.github.io/feed.xml</id><title type="html">blank</title><subtitle>Taeyoung&apos;s personal webpage. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">터미널 세팅하기</title><link href="https://taeyoungson.github.io/blog/2024/configure-terminal/" rel="alternate" type="text/html" title="터미널 세팅하기"/><published>2024-01-08T04:00:00+00:00</published><updated>2024-01-08T04:00:00+00:00</updated><id>https://taeyoungson.github.io/blog/2024/configure-terminal</id><content type="html" xml:base="https://taeyoungson.github.io/blog/2024/configure-terminal/"><![CDATA[<h2 id="pre-installation">Pre-Installation</h2> <hr/> <p>Dotfile이란 shell, vim 및 다양한 툴들의 설정파일들을 통틀어 지칭하는 단어입니다. 잘 구성된 개발환경은 업무 생산성에도 도움이 되죠! 대체로 . (dot)으로 시작하는 파일 이름을 지니기에 dotfile이라 일컬어 집니다.</p> <p>본 포스트에서는 제가 사용하는 우분투 터미널 dotfile setup 방식을 다루고, 구성된 docker image를 공유하고자 작성되었습니다.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/plugin_usages/coding-cat.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/plugin_usages/coding-cat.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/plugin_usages/coding-cat.gif-1400.webp"/> <img src="/assets/img/plugin_usages/coding-cat.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption">그럼, 시작해볼까요?</figcaption> </figure> <h3 id="getting-ready">Getting Ready</h3> <p>설치엔 python (&gt; 3.6)이 필요하므로 설치해 줍니다. <em>docker, venv, anaconda</em> 등 선호하는 툴을 이용해 설치할 환경을 구축합니다. 설치되어있는 python 버전은 다음 명령어로 확인할 수 있습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">--version</span> <span class="c"># &gt; 3.6</span>
</code></pre></div></div> <p><em>curl, git, node, npm, zsh</em> 이 필요하므로 설치 되어있지 않다면 먼저 설치해 줍니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update
apt-get <span class="nb">install </span>git curl tmux zsh
</code></pre></div></div> <p>기존 vim과 zsh를 위한 설정파일을 따로 사용하고 있다면 자동으로 백업되지 않으므로 설치전에 백업을 해주도록 합시다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 설치 전</span>
<span class="nb">mv</span> <span class="nv">$HOME</span>/.vimrc <span class="nv">$HOME</span>/.vimrc.bak
<span class="nb">mv</span> <span class="nv">$HOME</span>/.zshrc <span class="nv">$HOME</span>/.zshrc.bak

<span class="c"># 설치 후</span>
<span class="nb">cat</span> <span class="nv">$HOME</span>/.virmc.bak <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.vimrc <span class="o">&amp;&amp;</span> <span class="nb">rm</span> .vimrc.bak
<span class="nb">cat</span> <span class="nv">$HOME</span>/.zshrc.bak <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.zshrc <span class="o">&amp;&amp;</span> <span class="nb">rm</span> .zshrc.bak

<span class="c"># 위는 일반적인 백업 방식이며 본인 설정에 맞게 다시 병합해주도록 합니다.</span>
</code></pre></div></div> <p>또, 설치에는 <em>neovim (&gt;= 0.9.2)</em> 이 필요하므로 <a href="https://github.com/neovim/neovim">neovim</a> 에서 직접 설치해 줍니다. <em>apt-get</em> 을 이용해 설치시에는 버전이 낮으므로, 직접 빌드하는 것을 권합니다. 설치한 후에는 다음과 같이 버전을 확인할 수 있습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvim <span class="nt">--version</span> <span class="c"># &gt;= 0.9.2</span>
</code></pre></div></div> <h2 id="installation">Installation</h2> <p>저는 보통 clone받아 몇 가지를 커스터마이징 해서 사용합니다. 저는 ZSH와 더불어 잘 세팅되어 있는 <a href="https://github.com/wookayin/dotfiles">wookayin’s dotfile</a> 로부터 설치를 합니다. 설치 과정은 전부 자동화 되어 있기에 거의 건드릴 것이 없습니다. 이 자리를 빌어 끝내주는🔥 설정 파일 공유 해주신 <a href="https://github.com/wookayin">wookayin</a> 님께 감사를 전합니다!</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://dotfiles.wook.kr/etc/install | bash
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># some useful tools</span>
apt-get <span class="nb">install </span>tree silversearcher-ag
</code></pre></div></div> <p><em>만일 백업해 둔 설정파일들이 있으면 원하는 내용들은 다시 적절히 병합해줍니다</em></p> <h2 id="pre-built-images">Pre-built Images</h2> <p>제가 사용하기 위해 미리 만들어 놓은 이미지는 제 <a href="https://hub.docker.com/r/tiqqun/ubuntu/tags">docker hub</a>에서 pull 받아 사용하실 수 있습니다. ubuntu 22.04를 기준으로 작성되었습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull tiqqun/ubuntu:22.04v4
docker run <span class="nt">-it</span> <span class="nt">--name</span> ubuntu2204 tiqqun/ubuntu:22.04v4
</code></pre></div></div> <h2 id="usage">Usage</h2> <p>FZF</p> <ul> <li><a href="https://github.com/junegunn">junegunn</a>님의 fzf plugin을 이용한 커맨드 히스토리 서치 (<em>Ctrl-R</em>로 매핑되어 있음)</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/plugin_usages/fzf-search-big.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/plugin_usages/fzf-search-big.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/plugin_usages/fzf-search-big.gif-1400.webp"/> <img src="/assets/img/plugin_usages/fzf-search-big.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>똑같이 fzf를 이용한 Folder navigation (<em>Ctrl-E</em>로 매핑되어 있음)</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/plugin_usages/fzf-cd-widget.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/plugin_usages/fzf-cd-widget.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/plugin_usages/fzf-cd-widget.gif-1400.webp"/> <img src="/assets/img/plugin_usages/fzf-cd-widget.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <hr/> <h2 id="faq">FAQ</h2> <p>에러 내용을 통해 검색하시면 더 빠릅니다 🔍</p> <ul> <li>Spawning language server with cmd: ‘ruff-lsp’ failed. The language server is either not installed. <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>ruff-lsp
</code></pre></div> </div> </li> <li>[mason-lspconfig.nvim] failed to install pyright. Installation logs are available in :Mason and… <div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span>MasonInstall <span class="p">--</span>force pyright
</code></pre></div> </div> </li> </ul> <p>-</p>]]></content><author><name></name></author><category term="terminal"/><category term="zsh"/><category term="vim"/><category term="ubuntu"/><summary type="html"><![CDATA[우분투 터미널 개발 세팅하기]]></summary></entry><entry><title type="html">MobileOne by Apple🍎</title><link href="https://taeyoungson.github.io/blog/2023/app-mobileone/" rel="alternate" type="text/html" title="MobileOne by Apple🍎"/><published>2023-09-11T04:00:00+00:00</published><updated>2023-09-11T04:00:00+00:00</updated><id>https://taeyoungson.github.io/blog/2023/app-mobileone</id><content type="html" xml:base="https://taeyoungson.github.io/blog/2023/app-mobileone/"><![CDATA[<h2 id="abstract">Abstract</h2> <p>pass</p> <h2 id="method">Method</h2> <p>pass</p> <h2 id="experiments">Experiments</h2> <p>pass</p> <h2 id="codes">Codes</h2> <p>pass</p>]]></content><author><name></name></author><category term="ai"/><category term="ml"/><category term="light-weight-arch"/><summary type="html"><![CDATA[Reproducing Ml-Mobileone paper published by Apple]]></summary></entry><entry><title type="html">터미널 세팅하기</title><link href="https://taeyoungson.github.io/blog/2023/configure-terminal/" rel="alternate" type="text/html" title="터미널 세팅하기"/><published>2023-09-11T04:00:00+00:00</published><updated>2023-09-11T04:00:00+00:00</updated><id>https://taeyoungson.github.io/blog/2023/configure-terminal</id><content type="html" xml:base="https://taeyoungson.github.io/blog/2023/configure-terminal/"><![CDATA[<h2 id="pre-installation">Pre-Installation</h2> <hr/> <p>Dotfile이란 shell, vim 및 다양한 툴들의 설정파일들을 통틀어 지칭하는 단어입니다. 잘 구성된 개발환경은 업무 생산성에도 도움이 되죠! 대체로 . (dot)으로 시작하는 파일 이름을 지니기에 dotfile이라 일컬어 집니다.</p> <p>본 포스트에서는 제가 사용하는 우분투 터미널 dotfile setup 방식을 다루고, 구성된 docker image를 공유하고자 작성되었습니다.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/plugin_usages/coding-cat.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/plugin_usages/coding-cat.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/plugin_usages/coding-cat.gif-1400.webp"/> <img src="/assets/img/plugin_usages/coding-cat.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption">그럼, 시작해볼까요?</figcaption> </figure> <h3 id="getting-ready">Getting Ready</h3> <p>설치엔 python (&gt; 3.6)이 필요하므로 설치해 줍니다. <em>docker, venv, anaconda</em> 등 선호하는 툴을 이용해 설치할 환경을 구축합니다. 설치되어있는 python 버전은 다음 명령어로 확인할 수 있습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">--version</span> <span class="c"># &gt; 3.6</span>
</code></pre></div></div> <p><em>curl, git, node, npm, zsh</em> 이 필요하므로 설치 되어있지 않다면 먼저 설치해 줍니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update
apt-get <span class="nb">install </span>git curl tmux zsh
</code></pre></div></div> <p>기존 vim과 zsh를 위한 설정파일을 따로 사용하고 있다면 자동으로 백업되지 않으므로 설치전에 백업을 해주도록 합시다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 설치 전</span>
<span class="nb">mv</span> <span class="nv">$HOME</span>/.vimrc <span class="nv">$HOME</span>/.vimrc.bak
<span class="nb">mv</span> <span class="nv">$HOME</span>/.zshrc <span class="nv">$HOME</span>/.zshrc.bak

<span class="c"># 설치 후</span>
<span class="nb">cat</span> <span class="nv">$HOME</span>/.virmc.bak <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.vimrc <span class="o">&amp;&amp;</span> <span class="nb">rm</span> .vimrc.bak
<span class="nb">cat</span> <span class="nv">$HOME</span>/.zshrc.bak <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.zshrc <span class="o">&amp;&amp;</span> <span class="nb">rm</span> .zshrc.bak

<span class="c"># 위는 일반적인 백업 방식이며 본인 설정에 맞게 다시 병합해주도록 합니다.</span>
</code></pre></div></div> <p>또, 설치에는 <em>neovim (&gt;= 0.9.2)</em> 이 필요하므로 <a href="https://github.com/neovim/neovim">neovim</a> 에서 직접 설치해 줍니다. <em>apt-get</em> 을 이용해 설치시에는 버전이 낮으므로, 직접 빌드하는 것을 권합니다. 설치한 후에는 다음과 같이 버전을 확인할 수 있습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvim <span class="nt">--version</span> <span class="c"># &gt;= 0.9.2</span>
</code></pre></div></div> <h2 id="installation">Installation</h2> <p>저는 보통 clone받아 몇 가지를 커스터마이징 해서 사용합니다. 저는 ZSH와 더불어 잘 세팅되어 있는 <a href="https://github.com/wookayin/dotfiles">wookayin’s dotfile</a> 로부터 설치를 합니다. 설치 과정은 전부 자동화 되어 있기에 거의 건드릴 것이 없습니다. 이 자리를 빌어 끝내주는🔥 설정 파일 공유 해주신 <a href="https://github.com/wookayin">wookayin</a> 님께 감사를 전합니다!</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://dotfiles.wook.kr/etc/install | bash
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># some useful tools</span>
apt-get <span class="nb">install </span>tree silversearcher-ag
</code></pre></div></div> <p><em>만일 백업해 둔 설정파일들이 있으면 원하는 내용들은 다시 적절히 병합해줍니다</em></p> <h2 id="pre-built-images">Pre-built Images</h2> <p>제가 사용하기 위해 미리 만들어 놓은 이미지는 제 <a href="https://hub.docker.com/r/tiqqun/ubuntu/tags">docker hub</a>에서 pull 받아 사용하실 수 있습니다. ubuntu 22.04를 기준으로 작성되었습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull tiqqun/ubuntu:22.04
docker run <span class="nt">-it</span> <span class="nt">--name</span> ubuntu2204 tiqqun/ubuntu:22.04
</code></pre></div></div> <h2 id="usage">Usage</h2> <p>FZF</p> <ul> <li><a href="https://github.com/junegunn">junegunn</a>님의 fzf plugin을 이용한 커맨드 히스토리 서치 (<em>Ctrl-R</em>로 매핑되어 있음)</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/plugin_usages/fzf-search-big.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/plugin_usages/fzf-search-big.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/plugin_usages/fzf-search-big.gif-1400.webp"/> <img src="/assets/img/plugin_usages/fzf-search-big.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>똑같이 fzf를 이용한 Folder navigation (<em>Ctrl-E</em>로 매핑되어 있음)</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/plugin_usages/fzf-cd-widget.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/plugin_usages/fzf-cd-widget.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/plugin_usages/fzf-cd-widget.gif-1400.webp"/> <img src="/assets/img/plugin_usages/fzf-cd-widget.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <hr/> <h2 id="faq">FAQ</h2> <p>에러 내용을 통해 검색하시면 더 빠릅니다 🔍</p> <ul> <li>Spawning language server with cmd: ‘ruff-lsp’ failed. The language server is either not installed. <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>ruff-lsp
</code></pre></div> </div> </li> <li>[mason-lspconfig.nvim] failed to install pyright. Installation logs are available in :Mason and… <div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span>MasonInstall <span class="p">--</span>force pyright
</code></pre></div> </div> </li> </ul> <p>-</p>]]></content><author><name></name></author><category term="terminal"/><category term="zsh"/><category term="vim"/><category term="ubuntu"/><summary type="html"><![CDATA[우분투 터미널 개발 세팅하기]]></summary></entry></feed>